# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу:
# (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

# from sys import argv
#
# print(argv)
# path, all_hour, money_hour, price = argv
# all_hour, money_hour, price = map(int, argv[1:])
# result = all_hour * money_hour + price
# print(result)

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = []
for number in range(0, len(my_list) - 1):
    if my_list[number+1] > my_list[number]:
        new_list.append(my_list[number+1])
print(new_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
my_list = range(20, 241)
new_list = [i for i in my_list if i % 20 == 0 or i % 21 == 0]
print(new_list)

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.

# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [i for i in my_list if my_list.count(i) == 1]
print(new_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
#
# Подсказка: использовать функцию reduce().
from functools import reduce
my_list = [i for i in range(1,1001) if i % 2 == 0]
def my_func(el, elem):
    return el * elem
print(reduce(my_func, my_list))

# 6. Реализовать два небольших скрипта:
#
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
# #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# # Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
from itertools import count
a = int(input('Введите число с которого начнется генерация чисел: '))
b = int(input('Введите последнее число для генерации чисел: '))
for el in count(a):
    if el > b:
        break
    else:
        print(el)

from itertools import cycle
w = input('Введите элемент, который необходимо повторить: ').split()
y = int(input('Введите количество повторений: '))

с = 0
for el in cycle(w):
    if с > y - 1:
        break
    print(el)
    с += 1

# 7 Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial

def generator():
    res = factorial(n)
    yield res
n = int(input('введите число для вывода факториала: '))
g = generator()
print(g)
for el in g:
    print(el)

